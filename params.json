{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"An HTTP benchmarking tool written in Go.","body":"# Stampede\r\n\r\nLoad testing tool written (probably poorly) in Go. I am still learning.\r\n\r\nUsage:\r\n```\r\n$ go run stampede.go -h\r\nusage: stampede [address]\r\n\r\nOptions:\r\n  -b=false: Benchmark mode, fire requests without waiting.\r\n  -c=10: The number of buffalo to spawn.\r\n  -f=\"\": Input file to read from.\r\n  -h=false: Show this help.\r\n  -i=false: Random sampling of the input file.\r\n  -t=30: The duration of the stampede in seconds.\r\n  -v=false: Use verbose logging.\r\n  -w=1: The time clients wait between HTPT requests (in seconds).\r\n```\r\n\r\n## Input File Format\r\nAt the moment the input file format is a newline sepearted list of URLs to hit. e.g.\r\n```\r\nhttp://www.mydomain.com/index.html\r\nhttp://www.mydomain.com/access/information/1\r\n```\r\n\r\n## Goal\r\nThe final goal for this tool is to be able to simulate load in as REAL a way as possible. This means being\r\nable to craft and send requests with valid cookies/session data, POST real requests, etc...\r\n\r\nAnother nice-to-have feature I want to implement is the ability to aproximately match the timings in a given log file.\r\nThe use case for this being that you have a cluster of production webservers and you want to accurately replay\r\nfull requests (including headers) to another test clutser, at aproximately the same rate at which they arrive.\r\n\r\nUnclear what the input file format will be for that, ideally I would be able to read the default log format for \r\nNGINX, lighttpd or varnish...\r\n\r\n## Notes:\r\n\r\nPretty sure that for this to run with any success you will need to alter your max# of file descriptors open.\r\nIn linuxland you can do what I did and run `sudo vim /etc/security/limits.conf`, adding an entry for your \r\nuser like.\r\n```\r\nusername  -  nofile 128000\r\n```\r\n","name":"Go-stampede","google":""}